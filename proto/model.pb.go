// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package ictBridge

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionBuilder struct {
	SignatureFragments            string   `protobuf:"bytes,1,opt,name=signatureFragments,proto3" json:"signatureFragments,omitempty"`
	ExtraDataDigest               string   `protobuf:"bytes,2,opt,name=extraDataDigest,proto3" json:"extraDataDigest,omitempty"`
	Address                       string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Value                         []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	IssuanceTimestamp             int64    `protobuf:"varint,5,opt,name=issuanceTimestamp,proto3" json:"issuanceTimestamp,omitempty"`
	TimelockLowerBound            int64    `protobuf:"varint,6,opt,name=timelockLowerBound,proto3" json:"timelockLowerBound,omitempty"`
	TimelockUpperBound            int64    `protobuf:"varint,7,opt,name=timelockUpperBound,proto3" json:"timelockUpperBound,omitempty"`
	BundleNonce                   string   `protobuf:"bytes,8,opt,name=bundleNonce,proto3" json:"bundleNonce,omitempty"`
	TrunkHash                     string   `protobuf:"bytes,9,opt,name=trunkHash,proto3" json:"trunkHash,omitempty"`
	BranchHash                    string   `protobuf:"bytes,10,opt,name=branchHash,proto3" json:"branchHash,omitempty"`
	Tag                           string   `protobuf:"bytes,11,opt,name=tag,proto3" json:"tag,omitempty"`
	AttachmentTimestamp           int64    `protobuf:"varint,12,opt,name=attachmentTimestamp,proto3" json:"attachmentTimestamp,omitempty"`
	AttachmentTimestampLowerBound int64    `protobuf:"varint,13,opt,name=attachmentTimestampLowerBound,proto3" json:"attachmentTimestampLowerBound,omitempty"`
	AttachmentTimestampUpperBound int64    `protobuf:"varint,14,opt,name=attachmentTimestampUpperBound,proto3" json:"attachmentTimestampUpperBound,omitempty"`
	IsBundleHead                  bool     `protobuf:"varint,15,opt,name=isBundleHead,proto3" json:"isBundleHead,omitempty"`
	IsBundleTail                  bool     `protobuf:"varint,16,opt,name=isBundleTail,proto3" json:"isBundleTail,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *TransactionBuilder) Reset()         { *m = TransactionBuilder{} }
func (m *TransactionBuilder) String() string { return proto.CompactTextString(m) }
func (*TransactionBuilder) ProtoMessage()    {}
func (*TransactionBuilder) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}

func (m *TransactionBuilder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionBuilder.Unmarshal(m, b)
}
func (m *TransactionBuilder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionBuilder.Marshal(b, m, deterministic)
}
func (m *TransactionBuilder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionBuilder.Merge(m, src)
}
func (m *TransactionBuilder) XXX_Size() int {
	return xxx_messageInfo_TransactionBuilder.Size(m)
}
func (m *TransactionBuilder) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionBuilder.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionBuilder proto.InternalMessageInfo

func (m *TransactionBuilder) GetSignatureFragments() string {
	if m != nil {
		return m.SignatureFragments
	}
	return ""
}

func (m *TransactionBuilder) GetExtraDataDigest() string {
	if m != nil {
		return m.ExtraDataDigest
	}
	return ""
}

func (m *TransactionBuilder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TransactionBuilder) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionBuilder) GetIssuanceTimestamp() int64 {
	if m != nil {
		return m.IssuanceTimestamp
	}
	return 0
}

func (m *TransactionBuilder) GetTimelockLowerBound() int64 {
	if m != nil {
		return m.TimelockLowerBound
	}
	return 0
}

func (m *TransactionBuilder) GetTimelockUpperBound() int64 {
	if m != nil {
		return m.TimelockUpperBound
	}
	return 0
}

func (m *TransactionBuilder) GetBundleNonce() string {
	if m != nil {
		return m.BundleNonce
	}
	return ""
}

func (m *TransactionBuilder) GetTrunkHash() string {
	if m != nil {
		return m.TrunkHash
	}
	return ""
}

func (m *TransactionBuilder) GetBranchHash() string {
	if m != nil {
		return m.BranchHash
	}
	return ""
}

func (m *TransactionBuilder) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TransactionBuilder) GetAttachmentTimestamp() int64 {
	if m != nil {
		return m.AttachmentTimestamp
	}
	return 0
}

func (m *TransactionBuilder) GetAttachmentTimestampLowerBound() int64 {
	if m != nil {
		return m.AttachmentTimestampLowerBound
	}
	return 0
}

func (m *TransactionBuilder) GetAttachmentTimestampUpperBound() int64 {
	if m != nil {
		return m.AttachmentTimestampUpperBound
	}
	return 0
}

func (m *TransactionBuilder) GetIsBundleHead() bool {
	if m != nil {
		return m.IsBundleHead
	}
	return false
}

func (m *TransactionBuilder) GetIsBundleTail() bool {
	if m != nil {
		return m.IsBundleTail
	}
	return false
}

type Transaction struct {
	Hash                          string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	SignatureFragments            string   `protobuf:"bytes,2,opt,name=signatureFragments,proto3" json:"signatureFragments,omitempty"`
	ExtraDataDigest               string   `protobuf:"bytes,3,opt,name=extraDataDigest,proto3" json:"extraDataDigest,omitempty"`
	Address                       string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Value                         []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	IssuanceTimestamp             int64    `protobuf:"varint,6,opt,name=issuanceTimestamp,proto3" json:"issuanceTimestamp,omitempty"`
	TimelockLowerBound            int64    `protobuf:"varint,7,opt,name=timelockLowerBound,proto3" json:"timelockLowerBound,omitempty"`
	TimelockUpperBound            int64    `protobuf:"varint,8,opt,name=timelockUpperBound,proto3" json:"timelockUpperBound,omitempty"`
	BundleNonce                   string   `protobuf:"bytes,9,opt,name=bundleNonce,proto3" json:"bundleNonce,omitempty"`
	TrunkHash                     string   `protobuf:"bytes,10,opt,name=trunkHash,proto3" json:"trunkHash,omitempty"`
	BranchHash                    string   `protobuf:"bytes,11,opt,name=branchHash,proto3" json:"branchHash,omitempty"`
	Tag                           string   `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	AttachmentTimestamp           int64    `protobuf:"varint,13,opt,name=attachmentTimestamp,proto3" json:"attachmentTimestamp,omitempty"`
	AttachmentTimestampLowerBound int64    `protobuf:"varint,14,opt,name=attachmentTimestampLowerBound,proto3" json:"attachmentTimestampLowerBound,omitempty"`
	AttachmentTimestampUpperBound int64    `protobuf:"varint,15,opt,name=attachmentTimestampUpperBound,proto3" json:"attachmentTimestampUpperBound,omitempty"`
	Nonce                         string   `protobuf:"bytes,16,opt,name=nonce,proto3" json:"nonce,omitempty"`
	DecodedSignatureFragments     string   `protobuf:"bytes,17,opt,name=decodedSignatureFragments,proto3" json:"decodedSignatureFragments,omitempty"`
	Essence                       string   `protobuf:"bytes,18,opt,name=essence,proto3" json:"essence,omitempty"`
	IsBundleHead                  bool     `protobuf:"varint,19,opt,name=isBundleHead,proto3" json:"isBundleHead,omitempty"`
	IsBundleTail                  bool     `protobuf:"varint,20,opt,name=isBundleTail,proto3" json:"isBundleTail,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetSignatureFragments() string {
	if m != nil {
		return m.SignatureFragments
	}
	return ""
}

func (m *Transaction) GetExtraDataDigest() string {
	if m != nil {
		return m.ExtraDataDigest
	}
	return ""
}

func (m *Transaction) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetIssuanceTimestamp() int64 {
	if m != nil {
		return m.IssuanceTimestamp
	}
	return 0
}

func (m *Transaction) GetTimelockLowerBound() int64 {
	if m != nil {
		return m.TimelockLowerBound
	}
	return 0
}

func (m *Transaction) GetTimelockUpperBound() int64 {
	if m != nil {
		return m.TimelockUpperBound
	}
	return 0
}

func (m *Transaction) GetBundleNonce() string {
	if m != nil {
		return m.BundleNonce
	}
	return ""
}

func (m *Transaction) GetTrunkHash() string {
	if m != nil {
		return m.TrunkHash
	}
	return ""
}

func (m *Transaction) GetBranchHash() string {
	if m != nil {
		return m.BranchHash
	}
	return ""
}

func (m *Transaction) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Transaction) GetAttachmentTimestamp() int64 {
	if m != nil {
		return m.AttachmentTimestamp
	}
	return 0
}

func (m *Transaction) GetAttachmentTimestampLowerBound() int64 {
	if m != nil {
		return m.AttachmentTimestampLowerBound
	}
	return 0
}

func (m *Transaction) GetAttachmentTimestampUpperBound() int64 {
	if m != nil {
		return m.AttachmentTimestampUpperBound
	}
	return 0
}

func (m *Transaction) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Transaction) GetDecodedSignatureFragments() string {
	if m != nil {
		return m.DecodedSignatureFragments
	}
	return ""
}

func (m *Transaction) GetEssence() string {
	if m != nil {
		return m.Essence
	}
	return ""
}

func (m *Transaction) GetIsBundleHead() bool {
	if m != nil {
		return m.IsBundleHead
	}
	return false
}

func (m *Transaction) GetIsBundleTail() bool {
	if m != nil {
		return m.IsBundleTail
	}
	return false
}

func init() {
	proto.RegisterType((*TransactionBuilder)(nil), "TransactionBuilder")
	proto.RegisterType((*Transaction)(nil), "Transaction")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x8f, 0xda, 0x30,
	0x10, 0xc5, 0x95, 0x85, 0xf0, 0x67, 0xc2, 0x2e, 0xec, 0x2c, 0x07, 0x57, 0x6a, 0xab, 0x88, 0x53,
	0x0e, 0xd5, 0xaa, 0x52, 0xaf, 0x3d, 0x21, 0x54, 0xed, 0xa1, 0xea, 0x81, 0xd2, 0x0f, 0x30, 0xc4,
	0x23, 0x88, 0x36, 0xb1, 0x91, 0xed, 0xb4, 0xfd, 0x36, 0xbd, 0xf4, 0x83, 0x56, 0x31, 0x5d, 0x11,
	0x0a, 0x59, 0x40, 0xdd, 0x9b, 0xe7, 0xbd, 0x17, 0xcb, 0x7e, 0xfa, 0x39, 0x10, 0x15, 0x5a, 0x72,
	0x7e, 0xbf, 0x31, 0xda, 0xe9, 0xc9, 0xef, 0x10, 0x70, 0x61, 0x48, 0x59, 0x4a, 0x5d, 0xa6, 0xd5,
	0xb4, 0xcc, 0x72, 0xc9, 0x06, 0xef, 0x01, 0x6d, 0xb6, 0x52, 0xe4, 0x4a, 0xc3, 0x9f, 0x0c, 0xad,
	0x0a, 0x56, 0xce, 0x8a, 0x20, 0x0e, 0x92, 0xfe, 0xfc, 0x88, 0x83, 0x09, 0x0c, 0xf9, 0xa7, 0x33,
	0x34, 0x23, 0x47, 0xb3, 0x6c, 0xc5, 0xd6, 0x89, 0x2b, 0x1f, 0xfe, 0x57, 0x46, 0x01, 0x5d, 0x92,
	0xd2, 0xb0, 0xb5, 0xa2, 0xe5, 0x13, 0x4f, 0x23, 0x8e, 0x21, 0xfc, 0x4e, 0x79, 0xc9, 0xa2, 0x1d,
	0x07, 0xc9, 0x60, 0xbe, 0x1d, 0xf0, 0x1d, 0xdc, 0x66, 0xd6, 0x96, 0xa4, 0x52, 0x5e, 0x64, 0x05,
	0x5b, 0x47, 0xc5, 0x46, 0x84, 0x71, 0x90, 0xb4, 0xe6, 0x87, 0x46, 0x75, 0x6e, 0x97, 0x15, 0x9c,
	0xeb, 0xf4, 0xf1, 0xb3, 0xfe, 0xc1, 0x66, 0xaa, 0x4b, 0x25, 0x45, 0xc7, 0xc7, 0x8f, 0x38, 0xf5,
	0xfc, 0xb7, 0xcd, 0xe6, 0x29, 0xdf, 0xdd, 0xcf, 0xef, 0x1c, 0x8c, 0x21, 0x5a, 0x96, 0x4a, 0xe6,
	0xfc, 0x45, 0xab, 0x94, 0x45, 0xcf, 0xdf, 0xa0, 0x2e, 0xe1, 0x6b, 0xe8, 0x3b, 0x53, 0xaa, 0xc7,
	0x07, 0xb2, 0x6b, 0xd1, 0xf7, 0xfe, 0x4e, 0xc0, 0xb7, 0x00, 0x4b, 0x43, 0x2a, 0x5d, 0x7b, 0x1b,
	0xbc, 0x5d, 0x53, 0x70, 0x04, 0x2d, 0x47, 0x2b, 0x11, 0x79, 0xa3, 0x5a, 0xe2, 0x7b, 0xb8, 0x23,
	0xe7, 0x28, 0x5d, 0x57, 0x45, 0xef, 0x1a, 0x18, 0xf8, 0x23, 0x1e, 0xb3, 0x70, 0x06, 0x6f, 0x8e,
	0xc8, 0xb5, 0x3a, 0xae, 0xfd, 0xb7, 0xcf, 0x87, 0x1a, 0x76, 0xa9, 0x95, 0x74, 0xd3, 0xb8, 0x4b,
	0xad, 0xaf, 0x09, 0x0c, 0x32, 0x3b, 0xf5, 0xf5, 0x3c, 0x30, 0x49, 0x31, 0x8c, 0x83, 0xa4, 0x37,
	0xdf, 0xd3, 0xea, 0x99, 0x05, 0x65, 0xb9, 0x18, 0xed, 0x67, 0x2a, 0x6d, 0xf2, 0xab, 0x03, 0x51,
	0x0d, 0x53, 0x44, 0x68, 0xaf, 0xab, 0x06, 0xb7, 0x44, 0xfa, 0x75, 0x03, 0xb3, 0x57, 0x97, 0x30,
	0xdb, 0x3a, 0xc9, 0x6c, 0xbb, 0x81, 0xd9, 0xf0, 0x24, 0xb3, 0x9d, 0xcb, 0x98, 0xed, 0x5e, 0xc8,
	0x6c, 0xef, 0x5c, 0x66, 0xfb, 0x27, 0x98, 0x85, 0xe7, 0x99, 0x8d, 0x9a, 0x98, 0x1d, 0x9c, 0x64,
	0xf6, 0xfa, 0x3f, 0x98, 0xbd, 0x79, 0x11, 0x66, 0x87, 0xe7, 0x30, 0x3b, 0x86, 0x50, 0xf9, 0xa6,
	0x46, 0xfe, 0x46, 0xdb, 0x01, 0x3f, 0xc2, 0x2b, 0xc9, 0xa9, 0x96, 0x2c, 0xbf, 0x1e, 0x42, 0x76,
	0xeb, 0x93, 0xcd, 0x81, 0x8a, 0x20, 0xb6, 0x96, 0xab, 0x5d, 0x71, 0x4b, 0xd0, 0xdf, 0xf1, 0xe0,
	0x85, 0xdc, 0x9d, 0xf1, 0x42, 0xc6, 0x87, 0x2f, 0x64, 0xd9, 0xf1, 0xff, 0xf3, 0x0f, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x40, 0x38, 0xfa, 0xbd, 0xde, 0x05, 0x00, 0x00,
}
